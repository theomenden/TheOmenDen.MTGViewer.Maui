@page "/symbols"
@using OperationResult = TheOmenDen.Shared.Enumerations.OperationResult
@using TheOmenDen.Shared.Extensions
@using TheOmenDen.Shared.Responses
<Tabs RenderMode="TabsRenderMode.LazyReload"
      SelectedTab="@_selectedTab"
      SelectedTabChanged="@OnSelectedTabChangedAsync"
      Background="Background.Dark"
      TextColor="TextColor.Light"
      Flex="Flex.Row.AlignContent.Between"
      Margin="Margin.Is1.FromTop.OnFullHD.Is3.FromTop.OnMobile"
      FullWidth>
    <Items>
        <Tab Name="manaCosts"
             Border="Border.Is1.Rounded.Light.OnAll"
             TextWeight="TextWeight.Bold">
            Mana Costs
        </Tab>
        <Tab Name="manaRepresentatives"
             Border="Border.Is1.Rounded.Light.OnAll"
             TextWeight="TextWeight.Bold">
            Mana Representations
        </Tab>
        <Tab Name="transposables"
             Border="Border.Is1.Rounded.Light.OnAll"
             TextWeight="TextWeight.Bold">
            Transposables
        </Tab>
        <Tab Name="funny"
             Border="Border.Is1.Rounded.Light.OnAll"
             TextWeight="TextWeight.Bold">
            Funny
        </Tab>
        <Tab Name="other"
             Border="Border.Is1.Rounded.Light.OnAll"
             TextWeight="TextWeight.Bold">
            Other
        </Tab>
    </Items>
    <Content>
        <TabPanel Name="manaCosts" Background="Background.Dark" TextColor="TextColor.Light">
            <CardDeck>
                <Repeater TItem="SymbologyDatum" Items="@_manaCostSymbols" Context="manaSymbolContext">
                    <Card Width="Width.Auto" Shadow="Shadow.Default" Margin="Margin.IsAuto.OnX.Is2.OnY" Padding="Padding.Is2.OnX">
                        <CardBody>
                            <CardTitle TextColor="TextColor.Dark" Size="3">@manaSymbolContext.Symbol</CardTitle>
                            <CardSubtitle TextColor="TextColor.Muted">@manaSymbolContext.English</CardSubtitle>
                            <CardImage data-src="@manaSymbolContext.SvgUri"
                                       data-sizes="auto"
                                       Style="height:48px;width:48px;"
                                       Alt="@manaSymbolContext.English"
                                       Class="lazyload" />
                        </CardBody>
                    </Card>
                </Repeater>
            </CardDeck>
        </TabPanel>
        <TabPanel Name="manaRepresentatives" Background="Background.Dark" TextColor="TextColor.Light">
            <CardDeck>
                 <Repeater TItem="SymbologyDatum" Items="@_manaSymbols" Context="manaRepresentativeContext">
                    <Card Width="Width.Auto" Shadow="Shadow.Default" Margin="Margin.IsAuto.OnX.Is2.OnY" Padding="Padding.Is2.OnX">
                        <CardBody>
                             <CardTitle TextColor="TextColor.Dark" Size="3">@manaRepresentativeContext.Symbol</CardTitle>
                             <CardSubtitle TextColor="TextColor.Muted">@manaRepresentativeContext.English</CardSubtitle>
                             <CardImage data-src="@manaRepresentativeContext.SvgUri"
                                       data-sizes="auto"
                                       Style="height:48px;width:48px;"
                                       Alt="@manaRepresentativeContext.English"
                                       Class="lazyload" />
                        </CardBody>
                    </Card>
                </Repeater>
            </CardDeck>
        </TabPanel>
         <TabPanel Name="transposables" Background="Background.Dark" TextColor="TextColor.Light" Width="Width.Is100">
             <Container Fluid>
                 <CardDeck>
                    <Repeater TItem="SymbologyDatum" Items="@_transposableSymbols" Context="transposableContext">
                        <Card Width="Width.Auto" Shadow="Shadow.Default" Margin="Margin.IsAuto.OnX.Is2.OnY" Padding="Padding.Is2.OnX">
                             <CardBody>
                                 <CardTitle TextColor="TextColor.Dark" Size="3">@transposableContext.Symbol</CardTitle>
                                <CardSubtitle TextColor="TextColor.Muted">@transposableContext.English</CardSubtitle>
                                 <CardImage data-src="@transposableContext.SvgUri"
                                            data-sizes="auto"
                                            Style="height:48px;width:48px;"
                                            Alt="@transposableContext.English"
                                            Class="lazyload" />
                             </CardBody>
                         </Card>
                     </Repeater>
                 </CardDeck>
             </Container>
         </TabPanel>
        <TabPanel Name="funny" Background="Background.Dark" TextColor="TextColor.Light">
            <Container Fluid>
                <CardDeck>
                    <Repeater TItem="SymbologyDatum" Items="@_funnySymbols" Context="funnyContext">
                        <Card Width="Width.Auto" Shadow="Shadow.Default" Margin="Margin.IsAuto.OnX.Is2.OnY" Padding="Padding.Is2.OnX">
                            <CardBody>
                                <CardTitle TextColor="TextColor.Dark" Size="3">@funnyContext.Symbol</CardTitle>
                                <CardSubtitle TextColor="TextColor.Muted">@funnyContext.English</CardSubtitle>
                                <CardImage data-src="@funnyContext.SvgUri"
                                           data-sizes="auto"
                                           Style="height:48px;width:48px;"
                                           Alt="@funnyContext.English"
                                           Class="lazyload" />
                            </CardBody>
                        </Card>
                    </Repeater>
                </CardDeck>
            </Container>
        </TabPanel>
        <TabPanel Name="other" Background="Background.Dark" TextColor="TextColor.Light">
            <CardDeck>
                <Repeater TItem="SymbologyDatum" Items="@_otherSymbols" Context="miscContext">
                    <Card Width="Width.Auto" Shadow="Shadow.Default" Margin="Margin.IsAuto.OnX.Is2.OnY" Padding="Padding.Is2.OnX">
                        <CardBody>
                            <CardTitle TextColor="TextColor.Dark" Size="3">@miscContext.Symbol</CardTitle>
                            <CardSubtitle TextColor="TextColor.Muted">@miscContext.English</CardSubtitle>
                            <CardImage data-src="@miscContext.SvgUri"
                                       data-sizes="auto"
                                       Style="height:48px;width:48px;"
                                       Alt="@miscContext.English"
                                       Class="lazyload" />
                        </CardBody>
                    </Card>
                </Repeater>
            </CardDeck>
         </TabPanel>
     </Content>
 </Tabs>

 @code {

    [Inject]
    private ScryfallSymbologyService _symbologyService { get; init; }
     [Inject] public IMessageService MessageService { get; init; }
    private List<SymbologyDatum> _symbols = new(200);

    private readonly List<SymbologyDatum> _funnySymbols = new(50);

    private readonly List<SymbologyDatum> _manaSymbols = new(20);

    private readonly List<SymbologyDatum> _manaCostSymbols = new(40);

    private readonly List<SymbologyDatum> _transposableSymbols = new(40);

    private readonly List<SymbologyDatum> _otherSymbols = new(40);

    private string _selectedTab = "manaCosts";

    protected override async Task OnInitializedAsync()
    {
        if (!StringBuilderPoolFactory<GameSymbols>.Exists(nameof(GameSymbols)))
        {
            StringBuilderPoolFactory<GameSymbols>.Create(nameof(GameSymbols));
        }

        var symbolEndPointResponse = await _symbologyService.GetAllSymbolsFromScryfall().ConfigureAwait(false);

        if (symbolEndPointResponse.Outcome.OperationResult == OperationResult.Failure)
        {
            await OnApiFailureAsync().ConfigureAwait(false);
            return;
        }

        PopulateSymbolInformationAsync(symbolEndPointResponse);
    }

    private async Task OnApiFailureAsync()
    {
        var builder = StringBuilderPoolFactory<GameSymbols>.Get(nameof(GameSymbols));
        builder.Append("<a href='https://www.scryfall.com' class='text-link'>Scryfall Api</a> is down");
        builder.Append("<br /><strong><em>Please refresh the page</em></strong>");
        builder.Append(
        "<br /><hr>If the error still persists, create an issue on our <a href='https://github.com/theomenden/MTGView.Blazor.Server/issues' class='text-link'>GitHub!</a>");
        await MessageService.Error(new MarkupString(builder.ToString()), "Scryfall API could not be reached");
    }

    private void PopulateSymbolInformationAsync(ApiResponse<IEnumerable<SymbologyDatum>> symbolEndPointResponse)
    {
        _symbols = symbolEndPointResponse.Data.Select(symbolInformation => symbolInformation).ToList();

        _funnySymbols.AddRange(_symbols.Where(symbol => symbol.IsFunny));

        _manaCostSymbols.AddRange(_symbols.Where(symbol => symbol.CanBeInManaCost));

        _manaSymbols.AddRange(_symbols.Where(symbol => symbol.IsManaRepresentative));

        _transposableSymbols.AddRange(_symbols.Where(symbol => symbol.IsTransposable));

        _otherSymbols.AddRange(_symbols.Where(symbol =>
            !symbol.IsFunny && !symbol.CanBeInManaCost && !symbol.IsManaRepresentative && !symbol.IsTransposable));
    }

    private Task OnSelectedTabChangedAsync(string name)
    {
        _selectedTab = name;

        return Task.CompletedTask;
    }
}