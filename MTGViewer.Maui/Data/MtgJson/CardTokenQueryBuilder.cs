// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace MTGViewer.Maui.Data.MtgJson
{
    public partial class CardTokenQueryBuilder : GraphQlQueryBuilder<CardTokenQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new GraphQlFieldMetadata { Name = "artist" },
            new GraphQlFieldMetadata { Name = "asciiName" },
            new GraphQlFieldMetadata { Name = "availability", IsComplex = true },
            new GraphQlFieldMetadata { Name = "borderColor" },
            new GraphQlFieldMetadata { Name = "colorIdentity", IsComplex = true },
            new GraphQlFieldMetadata { Name = "colorIndicator", IsComplex = true },
            new GraphQlFieldMetadata { Name = "colors", IsComplex = true },
            new GraphQlFieldMetadata { Name = "edhrecRank" },
            new GraphQlFieldMetadata { Name = "faceName" },
            new GraphQlFieldMetadata { Name = "flavorText" },
            new GraphQlFieldMetadata { Name = "frameEffects", IsComplex = true },
            new GraphQlFieldMetadata { Name = "frameVersion" },
            new GraphQlFieldMetadata { Name = "hasFoil" },
            new GraphQlFieldMetadata { Name = "hasNonFoil" },
            new GraphQlFieldMetadata { Name = "identifiers", IsComplex = true, QueryBuilderType = typeof(IdentifierQueryBuilder) },
            new GraphQlFieldMetadata { Name = "isFullArt" },
            new GraphQlFieldMetadata { Name = "isOnlineOnly" },
            new GraphQlFieldMetadata { Name = "isPromo" },
            new GraphQlFieldMetadata { Name = "isReprint" },
            new GraphQlFieldMetadata { Name = "keywords", IsComplex = true },
            new GraphQlFieldMetadata { Name = "layout" },
            new GraphQlFieldMetadata { Name = "loyalty" },
            new GraphQlFieldMetadata { Name = "name" },
            new GraphQlFieldMetadata { Name = "number" },
            new GraphQlFieldMetadata { Name = "power" },
            new GraphQlFieldMetadata { Name = "promoTypes", IsComplex = true },
            new GraphQlFieldMetadata { Name = "reverseRelated", IsComplex = true },
            new GraphQlFieldMetadata { Name = "setCode" },
            new GraphQlFieldMetadata { Name = "side" },
            new GraphQlFieldMetadata { Name = "subTypes", IsComplex = true },
            new GraphQlFieldMetadata { Name = "text" },
            new GraphQlFieldMetadata { Name = "toughness" },
            new GraphQlFieldMetadata { Name = "type" },
            new GraphQlFieldMetadata { Name = "types", IsComplex = true },
            new GraphQlFieldMetadata { Name = "uuid" },
            new GraphQlFieldMetadata { Name = "watermark" }
        };

        protected override string TypeName { get; } = "CardToken";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

        public CardTokenQueryBuilder WithArtist(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("artist", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptArtist() => ExceptField("artist");

        public CardTokenQueryBuilder WithAsciiName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("asciiName", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptAsciiName() => ExceptField("asciiName");

        public CardTokenQueryBuilder WithAvailability(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("availability", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptAvailability() => ExceptField("availability");

        public CardTokenQueryBuilder WithBorderColor(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("borderColor", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptBorderColor() => ExceptField("borderColor");

        public CardTokenQueryBuilder WithColorIdentity(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("colorIdentity", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptColorIdentity() => ExceptField("colorIdentity");

        public CardTokenQueryBuilder WithColorIndicator(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("colorIndicator", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptColorIndicator() => ExceptField("colorIndicator");

        public CardTokenQueryBuilder WithColors(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("colors", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptColors() => ExceptField("colors");

        public CardTokenQueryBuilder WithEdhrecRank(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("edhrecRank", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptEdhrecRank() => ExceptField("edhrecRank");

        public CardTokenQueryBuilder WithFaceName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("faceName", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptFaceName() => ExceptField("faceName");

        public CardTokenQueryBuilder WithFlavorText(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("flavorText", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptFlavorText() => ExceptField("flavorText");

        public CardTokenQueryBuilder WithFrameEffects(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("frameEffects", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptFrameEffects() => ExceptField("frameEffects");

        public CardTokenQueryBuilder WithFrameVersion(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("frameVersion", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptFrameVersion() => ExceptField("frameVersion");

        public CardTokenQueryBuilder WithHasFoil(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("hasFoil", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptHasFoil() => ExceptField("hasFoil");

        public CardTokenQueryBuilder WithHasNonFoil(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("hasNonFoil", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptHasNonFoil() => ExceptField("hasNonFoil");

        public CardTokenQueryBuilder WithIdentifiers(IdentifierQueryBuilder identifierQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("identifiers", alias, identifierQueryBuilder, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptIdentifiers() => ExceptField("identifiers");

        public CardTokenQueryBuilder WithIsFullArt(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isFullArt", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptIsFullArt() => ExceptField("isFullArt");

        public CardTokenQueryBuilder WithIsOnlineOnly(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isOnlineOnly", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptIsOnlineOnly() => ExceptField("isOnlineOnly");

        public CardTokenQueryBuilder WithIsPromo(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isPromo", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptIsPromo() => ExceptField("isPromo");

        public CardTokenQueryBuilder WithIsReprint(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isReprint", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptIsReprint() => ExceptField("isReprint");

        public CardTokenQueryBuilder WithKeywords(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("keywords", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptKeywords() => ExceptField("keywords");

        public CardTokenQueryBuilder WithLayout(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("layout", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptLayout() => ExceptField("layout");

        public CardTokenQueryBuilder WithLoyalty(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("loyalty", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptLoyalty() => ExceptField("loyalty");

        public CardTokenQueryBuilder WithName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("name", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptName() => ExceptField("name");

        public CardTokenQueryBuilder WithNumber(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("number", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptNumber() => ExceptField("number");

        public CardTokenQueryBuilder WithPower(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("power", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptPower() => ExceptField("power");

        public CardTokenQueryBuilder WithPromoTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("promoTypes", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptPromoTypes() => ExceptField("promoTypes");

        public CardTokenQueryBuilder WithReverseRelated(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("reverseRelated", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptReverseRelated() => ExceptField("reverseRelated");

        public CardTokenQueryBuilder WithSetCode(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("setCode", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptSetCode() => ExceptField("setCode");

        public CardTokenQueryBuilder WithSide(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("side", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptSide() => ExceptField("side");

        public CardTokenQueryBuilder WithSubTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("subTypes", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptSubTypes() => ExceptField("subTypes");

        public CardTokenQueryBuilder WithText(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("text", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptText() => ExceptField("text");

        public CardTokenQueryBuilder WithToughness(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("toughness", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptToughness() => ExceptField("toughness");

        public CardTokenQueryBuilder WithType(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("type", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptType() => ExceptField("type");

        public CardTokenQueryBuilder WithTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("types", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptTypes() => ExceptField("types");

        public CardTokenQueryBuilder WithUuid(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("uuid", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptUuid() => ExceptField("uuid");

        public CardTokenQueryBuilder WithWatermark(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("watermark", alias, new GraphQlDirective?[] { include, skip });

        public CardTokenQueryBuilder ExceptWatermark() => ExceptField("watermark");
    }
}
