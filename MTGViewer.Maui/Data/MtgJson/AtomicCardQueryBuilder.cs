// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace MTGViewer.Maui.Data.MtgJson
{
    public partial class AtomicCardQueryBuilder : GraphQlQueryBuilder<AtomicCardQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "artist" },
            new GraphQlFieldMetadata { Name = "colorIdentity", IsComplex = true },
            new GraphQlFieldMetadata { Name = "colorIndicator", IsComplex = true },
            new GraphQlFieldMetadata { Name = "colors", IsComplex = true },
            new GraphQlFieldMetadata { Name = "convertedManaCost" },
            new GraphQlFieldMetadata { Name = "edhrecRank" },
            new GraphQlFieldMetadata { Name = "faceConvertedManaCost" },
            new GraphQlFieldMetadata { Name = "faceName" },
            new GraphQlFieldMetadata { Name = "foreignData", IsComplex = true, QueryBuilderType = typeof(ForeignDataQueryBuilder) },
            new GraphQlFieldMetadata { Name = "hand" },
            new GraphQlFieldMetadata { Name = "hasAlternativeDeckLimit" },
            new GraphQlFieldMetadata { Name = "isReserved" },
            new GraphQlFieldMetadata { Name = "layout" },
            new GraphQlFieldMetadata { Name = "leadershipSkills", IsComplex = true, QueryBuilderType = typeof(LeadershipSkillsQueryBuilder) },
            new GraphQlFieldMetadata { Name = "legalities", IsComplex = true, QueryBuilderType = typeof(LegalitiesQueryBuilder) },
            new GraphQlFieldMetadata { Name = "life" },
            new GraphQlFieldMetadata { Name = "loyalty" },
            new GraphQlFieldMetadata { Name = "manaCost" },
            new GraphQlFieldMetadata { Name = "name" },
            new GraphQlFieldMetadata { Name = "power" },
            new GraphQlFieldMetadata { Name = "printings", IsComplex = true },
            new GraphQlFieldMetadata { Name = "purchaseUrls", IsComplex = true, QueryBuilderType = typeof(PurchaseUrlsQueryBuilder) },
            new GraphQlFieldMetadata { Name = "rulings", IsComplex = true, QueryBuilderType = typeof(RulingsQueryBuilder) },
            new GraphQlFieldMetadata { Name = "side" },
            new GraphQlFieldMetadata { Name = "subTypes", IsComplex = true },
            new GraphQlFieldMetadata { Name = "superTypes", IsComplex = true },
            new GraphQlFieldMetadata { Name = "text" },
            new GraphQlFieldMetadata { Name = "toughness" },
            new GraphQlFieldMetadata { Name = "type" },
            new GraphQlFieldMetadata { Name = "types", IsComplex = true },
            new GraphQlFieldMetadata { Name = "uuid" }
        };

        protected override string TypeName { get; } = "AtomicCard";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

        public AtomicCardQueryBuilder WithId(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("id", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptId() => ExceptField("id");

        public AtomicCardQueryBuilder WithArtist(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("artist", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptArtist() => ExceptField("artist");

        public AtomicCardQueryBuilder WithColorIdentity(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("colorIdentity", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptColorIdentity() => ExceptField("colorIdentity");

        public AtomicCardQueryBuilder WithColorIndicator(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("colorIndicator", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptColorIndicator() => ExceptField("colorIndicator");

        public AtomicCardQueryBuilder WithColors(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("colors", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptColors() => ExceptField("colors");

        public AtomicCardQueryBuilder WithConvertedManaCost(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("convertedManaCost", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptConvertedManaCost() => ExceptField("convertedManaCost");

        public AtomicCardQueryBuilder WithEdhrecRank(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("edhrecRank", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptEdhrecRank() => ExceptField("edhrecRank");

        public AtomicCardQueryBuilder WithFaceConvertedManaCost(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("faceConvertedManaCost", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptFaceConvertedManaCost() => ExceptField("faceConvertedManaCost");

        public AtomicCardQueryBuilder WithFaceName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("faceName", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptFaceName() => ExceptField("faceName");

        public AtomicCardQueryBuilder WithForeignData(ForeignDataQueryBuilder foreignDataQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("foreignData", alias, foreignDataQueryBuilder, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptForeignData() => ExceptField("foreignData");

        public AtomicCardQueryBuilder WithHand(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("hand", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptHand() => ExceptField("hand");

        public AtomicCardQueryBuilder WithHasAlternativeDeckLimit(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("hasAlternativeDeckLimit", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptHasAlternativeDeckLimit() => ExceptField("hasAlternativeDeckLimit");

        public AtomicCardQueryBuilder WithIsReserved(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isReserved", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptIsReserved() => ExceptField("isReserved");

        public AtomicCardQueryBuilder WithLayout(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("layout", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptLayout() => ExceptField("layout");

        public AtomicCardQueryBuilder WithLeadershipSkills(LeadershipSkillsQueryBuilder leadershipSkillsQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("leadershipSkills", alias, leadershipSkillsQueryBuilder, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptLeadershipSkills() => ExceptField("leadershipSkills");

        public AtomicCardQueryBuilder WithLegalities(LegalitiesQueryBuilder legalitiesQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("legalities", alias, legalitiesQueryBuilder, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptLegalities() => ExceptField("legalities");

        public AtomicCardQueryBuilder WithLife(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("life", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptLife() => ExceptField("life");

        public AtomicCardQueryBuilder WithLoyalty(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("loyalty", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptLoyalty() => ExceptField("loyalty");

        public AtomicCardQueryBuilder WithManaCost(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("manaCost", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptManaCost() => ExceptField("manaCost");

        public AtomicCardQueryBuilder WithName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("name", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptName() => ExceptField("name");

        public AtomicCardQueryBuilder WithPower(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("power", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptPower() => ExceptField("power");

        public AtomicCardQueryBuilder WithPrintings(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("printings", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptPrintings() => ExceptField("printings");

        public AtomicCardQueryBuilder WithPurchaseUrls(PurchaseUrlsQueryBuilder purchaseUrlsQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("purchaseUrls", alias, purchaseUrlsQueryBuilder, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptPurchaseUrls() => ExceptField("purchaseUrls");

        public AtomicCardQueryBuilder WithRulings(RulingsQueryBuilder rulingsQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("rulings", alias, rulingsQueryBuilder, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptRulings() => ExceptField("rulings");

        public AtomicCardQueryBuilder WithSide(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("side", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptSide() => ExceptField("side");

        public AtomicCardQueryBuilder WithSubTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("subTypes", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptSubTypes() => ExceptField("subTypes");

        public AtomicCardQueryBuilder WithSuperTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("superTypes", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptSuperTypes() => ExceptField("superTypes");

        public AtomicCardQueryBuilder WithText(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("text", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptText() => ExceptField("text");

        public AtomicCardQueryBuilder WithToughness(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("toughness", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptToughness() => ExceptField("toughness");

        public AtomicCardQueryBuilder WithType(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("type", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptType() => ExceptField("type");

        public AtomicCardQueryBuilder WithTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("types", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptTypes() => ExceptField("types");

        public AtomicCardQueryBuilder WithUuid(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("uuid", alias, new GraphQlDirective?[] { include, skip });

        public AtomicCardQueryBuilder ExceptUuid() => ExceptField("uuid");
    }
}
