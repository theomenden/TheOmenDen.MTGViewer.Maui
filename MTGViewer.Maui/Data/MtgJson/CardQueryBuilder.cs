// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace MTGViewer.Maui.Data.MtgJson
{
    public partial class CardQueryBuilder : GraphQlQueryBuilder<CardQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new GraphQlFieldMetadata { Name = "uuid" },
            new GraphQlFieldMetadata { Name = "artist" },
            new GraphQlFieldMetadata { Name = "asciiName" },
            new GraphQlFieldMetadata { Name = "availability", IsComplex = true },
            new GraphQlFieldMetadata { Name = "borderColor" },
            new GraphQlFieldMetadata { Name = "colorIdentity", IsComplex = true },
            new GraphQlFieldMetadata { Name = "colorIndicator", IsComplex = true },
            new GraphQlFieldMetadata { Name = "colors", IsComplex = true },
            new GraphQlFieldMetadata { Name = "convertedManaCost" },
            new GraphQlFieldMetadata { Name = "count" },
            new GraphQlFieldMetadata { Name = "duelDeck" },
            new GraphQlFieldMetadata { Name = "edhrecRank" },
            new GraphQlFieldMetadata { Name = "faceConvertedManaCost" },
            new GraphQlFieldMetadata { Name = "faceName" },
            new GraphQlFieldMetadata { Name = "flavorName" },
            new GraphQlFieldMetadata { Name = "flavorText" },
            new GraphQlFieldMetadata { Name = "foreignData", IsComplex = true, QueryBuilderType = typeof(ForeignDataQueryBuilder) },
            new GraphQlFieldMetadata { Name = "frameEffects", IsComplex = true },
            new GraphQlFieldMetadata { Name = "frameVersion" },
            new GraphQlFieldMetadata { Name = "hand" },
            new GraphQlFieldMetadata { Name = "hasContentWarning" },
            new GraphQlFieldMetadata { Name = "hasFoil" },
            new GraphQlFieldMetadata { Name = "hasAlternativeDeckLimit" },
            new GraphQlFieldMetadata { Name = "hasNonFoil" },
            new GraphQlFieldMetadata { Name = "identifiers", IsComplex = true, QueryBuilderType = typeof(IdentifierQueryBuilder) },
            new GraphQlFieldMetadata { Name = "isAlternative" },
            new GraphQlFieldMetadata { Name = "isFoil" },
            new GraphQlFieldMetadata { Name = "isFullArt" },
            new GraphQlFieldMetadata { Name = "isOnlineOnly" },
            new GraphQlFieldMetadata { Name = "isOversized" },
            new GraphQlFieldMetadata { Name = "isPromo" },
            new GraphQlFieldMetadata { Name = "isReprint" },
            new GraphQlFieldMetadata { Name = "isReserved" },
            new GraphQlFieldMetadata { Name = "isStarter" },
            new GraphQlFieldMetadata { Name = "isStorySpotlight" },
            new GraphQlFieldMetadata { Name = "isTextless" },
            new GraphQlFieldMetadata { Name = "isTimeshifted" },
            new GraphQlFieldMetadata { Name = "keywords", IsComplex = true },
            new GraphQlFieldMetadata { Name = "layout" },
            new GraphQlFieldMetadata { Name = "leadershipSkills", IsComplex = true, QueryBuilderType = typeof(LeadershipSkillsQueryBuilder) },
            new GraphQlFieldMetadata { Name = "legalities", IsComplex = true, QueryBuilderType = typeof(LegalitiesQueryBuilder) },
            new GraphQlFieldMetadata { Name = "life" },
            new GraphQlFieldMetadata { Name = "loyalty" },
            new GraphQlFieldMetadata { Name = "manaCost" },
            new GraphQlFieldMetadata { Name = "name" },
            new GraphQlFieldMetadata { Name = "number" },
            new GraphQlFieldMetadata { Name = "originalText" },
            new GraphQlFieldMetadata { Name = "originalType" },
            new GraphQlFieldMetadata { Name = "otherFaceIds", IsComplex = true },
            new GraphQlFieldMetadata { Name = "power" },
            new GraphQlFieldMetadata { Name = "printings", IsComplex = true },
            new GraphQlFieldMetadata { Name = "promoTypes", IsComplex = true },
            new GraphQlFieldMetadata { Name = "purchaseUrls", IsComplex = true, QueryBuilderType = typeof(PurchaseUrlsQueryBuilder) },
            new GraphQlFieldMetadata { Name = "rarity" },
            new GraphQlFieldMetadata { Name = "rulings", IsComplex = true, QueryBuilderType = typeof(RulingsQueryBuilder) },
            new GraphQlFieldMetadata { Name = "setCode" },
            new GraphQlFieldMetadata { Name = "side" },
            new GraphQlFieldMetadata { Name = "subTypes", IsComplex = true },
            new GraphQlFieldMetadata { Name = "superTypes", IsComplex = true },
            new GraphQlFieldMetadata { Name = "text" },
            new GraphQlFieldMetadata { Name = "toughness" },
            new GraphQlFieldMetadata { Name = "type" },
            new GraphQlFieldMetadata { Name = "types", IsComplex = true },
            new GraphQlFieldMetadata { Name = "variation", IsComplex = true },
            new GraphQlFieldMetadata { Name = "watermark" },
            new GraphQlFieldMetadata { Name = "decksContaining", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeckQueryBuilder) },
            new GraphQlFieldMetadata { Name = "set", IsComplex = true, QueryBuilderType = typeof(SetQueryBuilder) },
            new GraphQlFieldMetadata { Name = "latestPrice", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(CardPricesQueryBuilder) },
            new GraphQlFieldMetadata { Name = "prices", IsComplex = true, QueryBuilderType = typeof(CardPricesQueryBuilder) }
        };

        protected override string TypeName { get; } = "Card";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

        public CardQueryBuilder WithUuid(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("uuid", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptUuid() => ExceptField("uuid");

        public CardQueryBuilder WithArtist(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("artist", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptArtist() => ExceptField("artist");

        public CardQueryBuilder WithAsciiName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("asciiName", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptAsciiName() => ExceptField("asciiName");

        public CardQueryBuilder WithAvailability(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("availability", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptAvailability() => ExceptField("availability");

        public CardQueryBuilder WithBorderColor(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("borderColor", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptBorderColor() => ExceptField("borderColor");

        public CardQueryBuilder WithColorIdentity(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("colorIdentity", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptColorIdentity() => ExceptField("colorIdentity");

        public CardQueryBuilder WithColorIndicator(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("colorIndicator", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptColorIndicator() => ExceptField("colorIndicator");

        public CardQueryBuilder WithColors(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("colors", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptColors() => ExceptField("colors");

        public CardQueryBuilder WithConvertedManaCost(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("convertedManaCost", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptConvertedManaCost() => ExceptField("convertedManaCost");

        public CardQueryBuilder WithCount(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("count", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptCount() => ExceptField("count");

        public CardQueryBuilder WithDuelDeck(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("duelDeck", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptDuelDeck() => ExceptField("duelDeck");

        public CardQueryBuilder WithEdhrecRank(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("edhrecRank", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptEdhrecRank() => ExceptField("edhrecRank");

        public CardQueryBuilder WithFaceConvertedManaCost(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("faceConvertedManaCost", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptFaceConvertedManaCost() => ExceptField("faceConvertedManaCost");

        public CardQueryBuilder WithFaceName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("faceName", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptFaceName() => ExceptField("faceName");

        public CardQueryBuilder WithFlavorName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("flavorName", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptFlavorName() => ExceptField("flavorName");

        public CardQueryBuilder WithFlavorText(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("flavorText", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptFlavorText() => ExceptField("flavorText");

        public CardQueryBuilder WithForeignData(ForeignDataQueryBuilder foreignDataQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("foreignData", alias, foreignDataQueryBuilder, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptForeignData() => ExceptField("foreignData");

        public CardQueryBuilder WithFrameEffects(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("frameEffects", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptFrameEffects() => ExceptField("frameEffects");

        public CardQueryBuilder WithFrameVersion(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("frameVersion", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptFrameVersion() => ExceptField("frameVersion");

        public CardQueryBuilder WithHand(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("hand", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptHand() => ExceptField("hand");

        public CardQueryBuilder WithHasContentWarning(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("hasContentWarning", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptHasContentWarning() => ExceptField("hasContentWarning");

        public CardQueryBuilder WithHasFoil(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("hasFoil", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptHasFoil() => ExceptField("hasFoil");

        public CardQueryBuilder WithHasAlternativeDeckLimit(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("hasAlternativeDeckLimit", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptHasAlternativeDeckLimit() => ExceptField("hasAlternativeDeckLimit");

        public CardQueryBuilder WithHasNonFoil(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("hasNonFoil", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptHasNonFoil() => ExceptField("hasNonFoil");

        public CardQueryBuilder WithIdentifiers(IdentifierQueryBuilder identifierQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("identifiers", alias, identifierQueryBuilder, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIdentifiers() => ExceptField("identifiers");

        public CardQueryBuilder WithIsAlternative(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isAlternative", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsAlternative() => ExceptField("isAlternative");

        public CardQueryBuilder WithIsFoil(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isFoil", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsFoil() => ExceptField("isFoil");

        public CardQueryBuilder WithIsFullArt(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isFullArt", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsFullArt() => ExceptField("isFullArt");

        public CardQueryBuilder WithIsOnlineOnly(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isOnlineOnly", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsOnlineOnly() => ExceptField("isOnlineOnly");

        public CardQueryBuilder WithIsOversized(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isOversized", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsOversized() => ExceptField("isOversized");

        public CardQueryBuilder WithIsPromo(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isPromo", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsPromo() => ExceptField("isPromo");

        public CardQueryBuilder WithIsReprint(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isReprint", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsReprint() => ExceptField("isReprint");

        public CardQueryBuilder WithIsReserved(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isReserved", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsReserved() => ExceptField("isReserved");

        public CardQueryBuilder WithIsStarter(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isStarter", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsStarter() => ExceptField("isStarter");

        public CardQueryBuilder WithIsStorySpotlight(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isStorySpotlight", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsStorySpotlight() => ExceptField("isStorySpotlight");

        public CardQueryBuilder WithIsTextless(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isTextless", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsTextless() => ExceptField("isTextless");

        public CardQueryBuilder WithIsTimeshifted(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isTimeshifted", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptIsTimeshifted() => ExceptField("isTimeshifted");

        public CardQueryBuilder WithKeywords(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("keywords", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptKeywords() => ExceptField("keywords");

        public CardQueryBuilder WithLayout(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("layout", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptLayout() => ExceptField("layout");

        public CardQueryBuilder WithLeadershipSkills(LeadershipSkillsQueryBuilder leadershipSkillsQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("leadershipSkills", alias, leadershipSkillsQueryBuilder, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptLeadershipSkills() => ExceptField("leadershipSkills");

        public CardQueryBuilder WithLegalities(LegalitiesQueryBuilder legalitiesQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("legalities", alias, legalitiesQueryBuilder, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptLegalities() => ExceptField("legalities");

        public CardQueryBuilder WithLife(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("life", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptLife() => ExceptField("life");

        public CardQueryBuilder WithLoyalty(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("loyalty", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptLoyalty() => ExceptField("loyalty");

        public CardQueryBuilder WithManaCost(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("manaCost", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptManaCost() => ExceptField("manaCost");

        public CardQueryBuilder WithName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("name", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptName() => ExceptField("name");

        public CardQueryBuilder WithNumber(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("number", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptNumber() => ExceptField("number");

        public CardQueryBuilder WithOriginalText(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("originalText", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptOriginalText() => ExceptField("originalText");

        public CardQueryBuilder WithOriginalType(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("originalType", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptOriginalType() => ExceptField("originalType");

        public CardQueryBuilder WithOtherFaceIds(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("otherFaceIds", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptOtherFaceIds() => ExceptField("otherFaceIds");

        public CardQueryBuilder WithPower(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("power", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptPower() => ExceptField("power");

        public CardQueryBuilder WithPrintings(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("printings", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptPrintings() => ExceptField("printings");

        public CardQueryBuilder WithPromoTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("promoTypes", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptPromoTypes() => ExceptField("promoTypes");

        public CardQueryBuilder WithPurchaseUrls(PurchaseUrlsQueryBuilder purchaseUrlsQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("purchaseUrls", alias, purchaseUrlsQueryBuilder, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptPurchaseUrls() => ExceptField("purchaseUrls");

        public CardQueryBuilder WithRarity(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("rarity", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptRarity() => ExceptField("rarity");

        public CardQueryBuilder WithRulings(RulingsQueryBuilder rulingsQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("rulings", alias, rulingsQueryBuilder, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptRulings() => ExceptField("rulings");

        public CardQueryBuilder WithSetCode(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("setCode", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptSetCode() => ExceptField("setCode");

        public CardQueryBuilder WithSide(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("side", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptSide() => ExceptField("side");

        public CardQueryBuilder WithSubTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("subTypes", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptSubTypes() => ExceptField("subTypes");

        public CardQueryBuilder WithSuperTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("superTypes", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptSuperTypes() => ExceptField("superTypes");

        public CardQueryBuilder WithText(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("text", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptText() => ExceptField("text");

        public CardQueryBuilder WithToughness(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("toughness", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptToughness() => ExceptField("toughness");

        public CardQueryBuilder WithType(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("type", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptType() => ExceptField("type");

        public CardQueryBuilder WithTypes(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("types", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptTypes() => ExceptField("types");

        public CardQueryBuilder WithVariation(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("variation", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptVariation() => ExceptField("variation");

        public CardQueryBuilder WithWatermark(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("watermark", alias, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptWatermark() => ExceptField("watermark");

        public CardQueryBuilder WithDecksContaining(DeckQueryBuilder deckQueryBuilder, QueryBuilderParameter<bool> includeSideboard, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includeSideboard", ArgumentValue = includeSideboard} );
            return WithObjectField("decksContaining", alias, deckQueryBuilder, new GraphQlDirective?[] { include, skip }, args);
        }

        public CardQueryBuilder ExceptDecksContaining() => ExceptField("decksContaining");

        public CardQueryBuilder WithSet(SetQueryBuilder setQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("set", alias, setQueryBuilder, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptSet() => ExceptField("set");

        public CardQueryBuilder WithLatestPrice(CardPricesQueryBuilder cardPricesQueryBuilder, QueryBuilderParameter<ListType> listType, QueryBuilderParameter<string> cardType, QueryBuilderParameter<string> provider, QueryBuilderParameter<string> format, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "listType", ArgumentValue = listType} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cardType", ArgumentValue = cardType} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "provider", ArgumentValue = provider} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format", ArgumentValue = format} );
            return WithObjectField("latestPrice", alias, cardPricesQueryBuilder, new GraphQlDirective?[] { include, skip }, args);
        }

        public CardQueryBuilder ExceptLatestPrice() => ExceptField("latestPrice");

        public CardQueryBuilder WithPrices(CardPricesQueryBuilder cardPricesQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("prices", alias, cardPricesQueryBuilder, new GraphQlDirective?[] { include, skip });

        public CardQueryBuilder ExceptPrices() => ExceptField("prices");
    }
}
