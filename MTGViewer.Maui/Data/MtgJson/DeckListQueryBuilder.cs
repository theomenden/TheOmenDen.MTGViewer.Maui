// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace MTGViewer.Maui.Data.MtgJson
{
    public partial class DeckListQueryBuilder : GraphQlQueryBuilder<DeckListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "code" },
            new GraphQlFieldMetadata { Name = "fileName" },
            new GraphQlFieldMetadata { Name = "name" },
            new GraphQlFieldMetadata { Name = "releaseDate" }
        };

        protected override string TypeName { get; } = "DeckList";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

        public DeckListQueryBuilder WithId(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("id", alias, new GraphQlDirective?[] { include, skip });

        public DeckListQueryBuilder ExceptId() => ExceptField("id");

        public DeckListQueryBuilder WithCode(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("code", alias, new GraphQlDirective?[] { include, skip });

        public DeckListQueryBuilder ExceptCode() => ExceptField("code");

        public DeckListQueryBuilder WithFileName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("fileName", alias, new GraphQlDirective?[] { include, skip });

        public DeckListQueryBuilder ExceptFileName() => ExceptField("fileName");

        public DeckListQueryBuilder WithName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("name", alias, new GraphQlDirective?[] { include, skip });

        public DeckListQueryBuilder ExceptName() => ExceptField("name");

        public DeckListQueryBuilder WithReleaseDate(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("releaseDate", alias, new GraphQlDirective?[] { include, skip });

        public DeckListQueryBuilder ExceptReleaseDate() => ExceptField("releaseDate");
    }
}
