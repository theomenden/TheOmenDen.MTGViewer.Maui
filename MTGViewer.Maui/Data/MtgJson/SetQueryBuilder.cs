// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace MTGViewer.Maui.Data.MtgJson
{
    public partial class SetQueryBuilder : GraphQlQueryBuilder<SetQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "baseSetSize" },
            new GraphQlFieldMetadata { Name = "block" },
            new GraphQlFieldMetadata { Name = "cards", IsComplex = true, QueryBuilderType = typeof(CardQueryBuilder) },
            new GraphQlFieldMetadata { Name = "code" },
            new GraphQlFieldMetadata { Name = "codeV3" },
            new GraphQlFieldMetadata { Name = "isForeignOnly" },
            new GraphQlFieldMetadata { Name = "isFoilOnly" },
            new GraphQlFieldMetadata { Name = "isNonFoilOnly" },
            new GraphQlFieldMetadata { Name = "isOnlineOnly" },
            new GraphQlFieldMetadata { Name = "isPaperOnly" },
            new GraphQlFieldMetadata { Name = "isPartialPreview" },
            new GraphQlFieldMetadata { Name = "keyruneCode" },
            new GraphQlFieldMetadata { Name = "mcmName" },
            new GraphQlFieldMetadata { Name = "mcmId" },
            new GraphQlFieldMetadata { Name = "mtgoCode" },
            new GraphQlFieldMetadata { Name = "name" },
            new GraphQlFieldMetadata { Name = "parentCode" },
            new GraphQlFieldMetadata { Name = "releaseDate" },
            new GraphQlFieldMetadata { Name = "tcgplayerGroupId" },
            new GraphQlFieldMetadata { Name = "tokens", IsComplex = true, QueryBuilderType = typeof(CardTokenQueryBuilder) },
            new GraphQlFieldMetadata { Name = "totalSetSize" },
            new GraphQlFieldMetadata { Name = "translations", IsComplex = true, QueryBuilderType = typeof(TranslationsQueryBuilder) },
            new GraphQlFieldMetadata { Name = "type" }
        };

        protected override string TypeName { get; } = "Set";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

        public SetQueryBuilder WithId(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("id", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptId() => ExceptField("id");

        public SetQueryBuilder WithBaseSetSize(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("baseSetSize", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptBaseSetSize() => ExceptField("baseSetSize");

        public SetQueryBuilder WithBlock(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("block", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptBlock() => ExceptField("block");

        public SetQueryBuilder WithCards(CardQueryBuilder cardQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("cards", alias, cardQueryBuilder, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptCards() => ExceptField("cards");

        public SetQueryBuilder WithCode(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("code", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptCode() => ExceptField("code");

        public SetQueryBuilder WithCodeV3(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("codeV3", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptCodeV3() => ExceptField("codeV3");

        public SetQueryBuilder WithIsForeignOnly(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isForeignOnly", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptIsForeignOnly() => ExceptField("isForeignOnly");

        public SetQueryBuilder WithIsFoilOnly(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isFoilOnly", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptIsFoilOnly() => ExceptField("isFoilOnly");

        public SetQueryBuilder WithIsNonFoilOnly(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isNonFoilOnly", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptIsNonFoilOnly() => ExceptField("isNonFoilOnly");

        public SetQueryBuilder WithIsOnlineOnly(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isOnlineOnly", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptIsOnlineOnly() => ExceptField("isOnlineOnly");

        public SetQueryBuilder WithIsPaperOnly(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isPaperOnly", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptIsPaperOnly() => ExceptField("isPaperOnly");

        public SetQueryBuilder WithIsPartialPreview(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("isPartialPreview", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptIsPartialPreview() => ExceptField("isPartialPreview");

        public SetQueryBuilder WithKeyruneCode(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("keyruneCode", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptKeyruneCode() => ExceptField("keyruneCode");

        public SetQueryBuilder WithMcmName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("mcmName", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptMcmName() => ExceptField("mcmName");

        public SetQueryBuilder WithMcmId(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("mcmId", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptMcmId() => ExceptField("mcmId");

        public SetQueryBuilder WithMtgoCode(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("mtgoCode", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptMtgoCode() => ExceptField("mtgoCode");

        public SetQueryBuilder WithName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("name", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptName() => ExceptField("name");

        public SetQueryBuilder WithParentCode(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("parentCode", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptParentCode() => ExceptField("parentCode");

        public SetQueryBuilder WithReleaseDate(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("releaseDate", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptReleaseDate() => ExceptField("releaseDate");

        public SetQueryBuilder WithTcgplayerGroupId(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("tcgplayerGroupId", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptTcgplayerGroupId() => ExceptField("tcgplayerGroupId");

        public SetQueryBuilder WithTokens(CardTokenQueryBuilder cardTokenQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("tokens", alias, cardTokenQueryBuilder, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptTokens() => ExceptField("tokens");

        public SetQueryBuilder WithTotalSetSize(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("totalSetSize", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptTotalSetSize() => ExceptField("totalSetSize");

        public SetQueryBuilder WithTranslations(TranslationsQueryBuilder translationsQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithObjectField("translations", alias, translationsQueryBuilder, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptTranslations() => ExceptField("translations");

        public SetQueryBuilder WithType(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null) => WithScalarField("type", alias, new GraphQlDirective?[] { include, skip });

        public SetQueryBuilder ExceptType() => ExceptField("type");
    }
}
